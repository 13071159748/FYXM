//
//  GYReadGlobalPropety.swift
//  Reader
//
//  Created by CQSC  on 2017/6/22.
//  Copyright ¬© 2017Âπ¥  CQSC. All rights reserved.
//

import UIKit

/// ÁøªÈ°µÁ±ªÂûã
enum GYReadEffectType: String {
    case none = "Êó†"               // Êó†ÊïàÊûú
    case translation = "ÁÆÄÁ∫¶"         // Âπ≥Áßª
    case simulation = "‰ªøÁúü"          // ‰ªøÁúü
    case upAndDown = "‰∏ä‰∏ã"           // ‰∏ä‰∏ã
    func conversion()->String {
        switch self {
        case .none:  return kLocalized("ThereIsNo")
        case .translation: return kLocalized("contracted")
        case .simulation: return kLocalized("TheSimulation")
        case .upAndDown:  return  kLocalized("UpAndDown")
        }
    }
    
}


/// Â≠ó‰ΩìÁ±ªÂûã
enum GYReadFontType: String {
    case system = "Á≥ªÁªü"             // Á≥ªÁªü
    case one = "Èªë‰Ωì"                // Èªë‰Ωì
    case two = "Ê•∑‰Ωì"                // Ê•∑‰Ωì
    case three = "ÂÆã‰Ωì"              // ÂÆã‰Ωì
}

enum GYReadLineStyle: Float {
    case min = 1.4
    case max = 2.2
    case mid = 2.0
    case original = 1.9
    case custom = 0.0
}

enum GYReadFontStyle: String {
    case zh_hans = "ÁÆÄ‰Ωì"
    case zh_hant = "ÁπÅ‰Ωì"
}


enum readSettingViewSytle: String{
    case fontView = "fontView"
    case moreView = "moreView"
}

// MARK: -- Â±èÂπïÂ±ûÊÄß
/// ÂØºËà™Ê†èÈ´òÂ∫¶
let NavgationBarHeight:CGFloat = root_nav_height+root_status_height

/// ËèúÂçïËÉåÊôØÈ¢úËâ≤
let GYMenuUIColor: UIColor = UIColor.black.withAlphaComponent(0.85)


// MARK: -- Key
/// ÊòØÂ§úÈó¥ËøòÊòØÊó•Èó¥Ê®°Âºè   true:Â§úÈó¥ false:Êó•Èó¥
let GYKey_IsNighOrtDay:String = "isNightOrDay"


// MARK: -- Ëé∑ÂèñÊó∂Èó¥

/// Ëé∑ÂèñÂΩìÂâçÊó∂Èó¥‰º†ÂÖ• Êó∂Èó¥Ê†ºÂºè "YYYY-MM-dd-HH-mm-ss"
func GetCurrentTimerString(dateFormat:String) ->String {
    
    let dateformatter = DateFormatter()
    
    dateformatter.dateFormat = dateFormat
    
    return dateformatter.string(from: Date())
}

/// Â∞Ü Êó∂Èó¥ Ê†πÊçÆ Á±ªÂûã ËΩ¨Êàê Êó∂Èó¥Â≠óÁ¨¶‰∏≤
func GetTimerString(dateFormat:String, date:Date) ->String {
    
    let dateformatter = DateFormatter()
    
    dateformatter.dateFormat = dateFormat
    
    return dateformatter.string(from: date)
}

/// Ëé∑ÂèñÂΩìÂâçÁöÑ TimeIntervalSince1970 Êó∂Èó¥Â≠óÁ¨¶‰∏≤
func GetCurrentTimeIntervalSince1970String() -> String {
    
    return String(format: "%.0f",Date().timeIntervalSince1970)
}

// MARK: -- ÈòÖËØªViewLayout
func GetPageVCLayout() -> pageVCLayout {
    var pageLayout = pageVCLayout()
    
    pageLayout.s_width = screenWidth
    pageLayout.s_height = screenHeight
    
    pageLayout.margin_top = 12
    pageLayout.margin_bottom = 4
    pageLayout.margin_left = 20
    pageLayout.margin_right = 20
    
    pageLayout.titleView_height = 18
    pageLayout.titleView_tableView_space = 10
    
    pageLayout.statusView_height = 20
    pageLayout.statusView_tableView_space = 12
    
    return pageLayout
}

/* ÈòÖËØªViewÁöÑ‰ΩçÁΩÆ
 
 ÈúÄË¶ÅÂÅöÊ®™Á´ñÂ±èÁöÑÂèØ‰ª•Âú®ËøôÈáå‰øÆÊîπÈòÖËØªViewÁöÑÂ§ßÂ∞è
 
 GetReadViewFrame ‰ºö‰ΩøÁî®‰∏é ÈòÖËØªViewÁöÑFrame ‰ª•ÂèäËÆ°ÁÆóÂàÜÈ°µÁöÑËåÉÂõ¥
 
 */
func GetReadViewFrame() -> CGRect {
    let pageLayout = GetPageVCLayout()
//    let height = pageLayout.s_height-pageLayout.margin_top-pageLayout.margin_bottom-pageLayout.titleView_tableView_space-pageLayout.titleView_height-pageLayout.statusView_tableView_space-pageLayout.statusView_height
//    MQLog("üçåüçå---\(height)")
    return CGRect(x: 0,
                  y: 0,
                  width: pageLayout.s_width-pageLayout.margin_left-pageLayout.margin_right,
                  height: pageLayout.s_height-pageLayout.margin_top-pageLayout.margin_bottom-pageLayout.titleView_tableView_space-pageLayout.titleView_height-pageLayout.statusView_tableView_space-pageLayout.statusView_height-x_StatusBarHeight+20-x_TabbatSafeBottomMargin)
}


