// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AppEventLog.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "AppEventLog.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AppEventLogRoot

@implementation AppEventLogRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - AppEventLogRoot_FileDescriptor

static GPBFileDescriptor *AppEventLogRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Platform

GPBEnumDescriptor *Platform_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PNone\000Ios\000Android\000Web\000H5\000";
    static const int32_t values[] = {
        Platform_PNone,
        Platform_Ios,
        Platform_Android,
        Platform_Web,
        Platform_H5,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Platform)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Platform_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Platform_IsValidValue(int32_t value__) {
  switch (value__) {
    case Platform_PNone:
    case Platform_Ios:
    case Platform_Android:
    case Platform_Web:
    case Platform_H5:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Params

@implementation Params

@dynamic key;
@dynamic value;

typedef struct Params__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *value;
} Params__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = Params_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Params__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = Params_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Params__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Params class]
                                     rootClass:[AppEventLogRoot class]
                                          file:AppEventLogRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Params__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BaseInfo

@implementation BaseInfo

@dynamic appName;
@dynamic timestamp;
@dynamic platform;
@dynamic uuid;
@dynamic fc;

typedef struct BaseInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t timestamp;
  Platform platform;
  NSString *appName;
  NSString *uuid;
  NSString *fc;
} BaseInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appName",
        .dataTypeSpecific.className = NULL,
        .number = BaseInfo_FieldNumber_AppName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BaseInfo__storage_, appName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = BaseInfo_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BaseInfo__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = Platform_EnumDescriptor,
        .number = BaseInfo_FieldNumber_Platform,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BaseInfo__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = BaseInfo_FieldNumber_Uuid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BaseInfo__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fc",
        .dataTypeSpecific.className = NULL,
        .number = BaseInfo_FieldNumber_Fc,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BaseInfo__storage_, fc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BaseInfo class]
                                     rootClass:[AppEventLogRoot class]
                                          file:AppEventLogRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BaseInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t BaseInfo_Platform_RawValue(BaseInfo *message) {
  GPBDescriptor *descriptor = [BaseInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BaseInfo_FieldNumber_Platform];
  return GPBGetMessageInt32Field(message, field);
}

void SetBaseInfo_Platform_RawValue(BaseInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [BaseInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BaseInfo_FieldNumber_Platform];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - BusinessInfo

@implementation BusinessInfo

@dynamic userId;
@dynamic timestamp;
@dynamic event;
@dynamic paramsArray, paramsArray_Count;

typedef struct BusinessInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t userId;
  int32_t timestamp;
  NSString *event;
  NSMutableArray *paramsArray;
} BusinessInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = BusinessInfo_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BusinessInfo__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = BusinessInfo_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BusinessInfo__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "event",
        .dataTypeSpecific.className = NULL,
        .number = BusinessInfo_FieldNumber_Event,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BusinessInfo__storage_, event),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "paramsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Params),
        .number = BusinessInfo_FieldNumber_ParamsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BusinessInfo__storage_, paramsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BusinessInfo class]
                                     rootClass:[AppEventLogRoot class]
                                          file:AppEventLogRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BusinessInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LogInfo

@implementation LogInfo

@dynamic hasBaseInfo, baseInfo;
@dynamic businessInfoArray, businessInfoArray_Count;

typedef struct LogInfo__storage_ {
  uint32_t _has_storage_[1];
  BaseInfo *baseInfo;
  NSMutableArray *businessInfoArray;
} LogInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseInfo),
        .number = LogInfo_FieldNumber_BaseInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LogInfo__storage_, baseInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "businessInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(BusinessInfo),
        .number = LogInfo_FieldNumber_BusinessInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LogInfo__storage_, businessInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogInfo class]
                                     rootClass:[AppEventLogRoot class]
                                          file:AppEventLogRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LogInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
